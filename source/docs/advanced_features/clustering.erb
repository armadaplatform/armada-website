<link type="text/css" rel="stylesheet" href="/assets/css/article.css"/>
<div class="content">
    <h3>Clustering.</h3>
    <p/>
    Usually in production environment, we have more than one server. With Armada you can simply join them together forming a cluster.
    This allows you to manage services on any ship from any ship within such cluster.

    <h4>Joining ships.</h4>
    <p/>
    Let's say we have two servers running Armada services: <span class="inline-name">192.168.3.10</span> and <span class="inline-name">192.168.3.11</span>.
    <br/>
    <div class="code">
    <div class="host-info">Host: 192.168.3.10</div>
    <div class="command">$ armada list</div>

    <div class="command-result">
Name            Address             ID              Status      Tags
armada          192.168.3.10:8900   ae148a2d3a1a    passing     -
example-1       192.168.3.10:32868  e93f803bbea8    passing     ['env:dev']
    </div>
    </div>
    <br/>
    <div class="code other">
    <div class="host-info">Host: 192.168.3.11</div>
    <div class="command">$ armada list</div>
    <div class="command-result">
Name            Address             ID              Status      Tags
armada          192.168.3.11:8900   27cc85f15888    passing     -
example-2       192.168.3.11:32422  efe0e1ab41e5    passing     ['env:dev']
    </div>
    </div>
    <p/>
    <br/>
    We can join them together with simple <span class="inline-name">armada join</span> command:
    <div class="code">
    <div class="host-info">Host: 192.168.3.10</div>
    <div class="command">$ armada join 192.168.3.11</div>
    <div class="command-result">
{u'status': u'ok'}
    </div>
    <div class="command">$ armada list</div>
    <div class="command-result">
Name            Address             ID              Status      Tags
armada          192.168.3.10:8900   ae148a2d3a1a    passing     -
armada          192.168.3.11:8900   27cc85f15888    passing     -
example-1       192.168.3.10:32868  e93f803bbea8    passing     ['env:dev']
example-2       192.168.3.11:32422  efe0e1ab41e5    passing     ['env:dev']
    </div>
    </div>
    <br/>
    <p/>
    <span class="inline-name">armada info</span> command displays core information about our cluster.
    <div class="code">
        <div class="host-info">Host: 192.168.3.10</div>
        <div class="command">$ armada info</div>
        <div class="command-result">
Ship name       Ship role  API address          API status  Version
192.168.3.11    leader     192.168.3.11:8900    passing     0.8.0
192.168.3.10    ship       192.168.3.10:8900    passing     0.7.3

WARNING: We cannot survive leader leaving/failure.
Such configuration should only be used in development environments.
        </div>
    </div>
    <p/>
    Notice that when forming a cluster, the ship that we joined to is marked as a leader.
    Another important thing is a displayed warning. We will cover it below.
    <br/><br/>
    We can now manage services on any ship. Let's try it out!!
    <div class="code">
    <div class="host-info">Host: 192.168.3.10</div>
    <div class="command">$ armada stop example-2</div>
    <div class="command-result">
Stopping service example-2...
Service has been stopped.
    </div>
        <div class="command">$ armada run example -r example-clustering --ship 192.168.3.11 --env dev</div>
        <div class="command-result">
Running microservice example-clustering (renamed from example) from dockyard: dockyard.armada.sh (alias: armada) on remote ship: 192.168.3.11...
Service is running in container 054546732f69 available at addresses:
192.168.3.11:32769 (80/tcp)
        </div>
        <div class="command">$ armada list</div>
        <div class="command-result">
Name                Address             ID              Status      Tags
armada              192.168.3.10:8900   ae148a2d3a1a    passing     -
armada              192.168.3.11:8900   27cc85f15888    passing     -
example-1           192.168.3.10:32868  e93f803bbea8    passing     ['env:dev']


example-clustering  192.168.3.11:32769  054546732f69    passing     ['env:dev']
        </div>
    </div>
    <p/>
    <h4>Production environment.</h4>
    <p/>
    Right now, our cluster has one <span class="inline-name">leader</span>, one <span class="inline-name">ship</span> and zero <span class="inline-name">commanders</span>.
    There can be only one <span class="inline-name">leader</span> and multiple <span class="inline-name">commanders</span>.
    In case of failure, they are responsible for making recovery decisions based on <a href="https://raft.github.io">Raft Consensus</a>.
    Because decisions are based on majority, we suggest having at least 2 <span class="inline-name">commanders</span> in addition to <span class="inline-name">leader</span>.
    To promote a ship to <span class="inline-name">commander</span> role
    run <span class="inline-name">armada promote</span> command.
    <h4>Hints.</h4>
    <ul class="text">
        <li>To remove a ship from cluster run <span class="inline-name">armada shutdown</span> followed by <span class="inline-name">sudo service armada start</span></li>
        <li>If you don't want to use IP addresses as ship names, you can run <span class="inline-name">armada rename {new_name}</span>.
            Renaming restarts a ship, so do it before joining into a cluster, or after you have formed recoverable cluster.</li>
    </ul>
