<link type="text/css" rel="stylesheet" href="/assets/css/article.css"/>
<div class="content">
    <h3>Service discovery.</h3>

    <p/>
    Service discovery allows you to specify dependencies between two or more services, without hardcoding their
    addresses and ports. Let's say we have two services:
    <ul class="text">
        <li>
        <span class="inline-name">scores-backend</span> which provides REST API on port 80 inside the container (exposed to 32868 outside the container)
        </li>
         <li>
        <span class="inline-name">scores-frontend</span> which displays data provided by <span class="inline-name">scores-backend</span> API.
        </li>
    </ul>

    <div class="code">
        <div class="command">$ armada list</div>
        <div class="command-result">
Name            Address             ID              Status      Tags
armada          192.168.3.141:49153 ae148a2d3a1a    passing     -
scores-backend  192.168.3.91:32868  e93f803bbea8    passing     ['env:dev']
scores-frontend 192.168.3.91:32870  7f50c2d2f285    passing     ['env:dev']
        </div>
    </div>

    <h4>Without service discovery.</h4>
    <p/>
    In this case, our <span class="inline-name">scores-frontend</span> service would have to know on which address and port can it find <span class="inline-name">scores-backend</span>.
    We can hardcode it, but this is not a good practice. What happens when a backend service port changes?
    You can always run this service on the same port, but what happens if this port is used by another service?
    You'd have to change your configuration.
    As number of services grow, you have to remember which service runs on which port, as well as keep it well documented.

    <h4>With service discovery.</h4>
    <p/>
    Armada offers solution to this problem. In our <span class="inline-name">scores-frontend</span> code, we can simply add one entry to our supervisor
    configuration.
    <div class="code" style="background-color: #f1f0f0;">
        <div class="host-info" style="background-color: #444444;">
            scores_frontend.conf
        </div>

        <div class="command-result" style="color: #000000;">
[<span style='color:#400000; font-weight:bold;'>program</span>:require_scores_backend]
<span style='color:#400000; font-weight:bold;'>command</span>=microservice require 2000 scores-backend
        </div>
    </div>
    <p/>
    <span class="inline-name">microservice require</span> finds an armada service with <span class="inline-name">scores-backend</span> name and 'dev' env,
    then maps it's address to <span class="inline-name">localhost:2000</span> inside the container.
    From now on, we can deploy <span class="inline-name">scores-backend</span> on any ship within armada cluster and always use <span class="inline-name">localhost:2000</span> for API requests.

    <h4>Configurable requirements.</h4>
    <p/>
    In our <span class="inline-name">scores-frontend</span> code, in config path we can place <span class="inline-name">service_discovery.json</span> file containing configuration.
    <div class="code" style="background-color: #f1f0f0;">
      <div class="host-info" style="background-color: #444444;">
        service_discovery.json
      </div>

      <div class="command-result" style="color: #000000;">
{
    "scores-backend":{"port":"2000"}
}
      </div>
    </div>
    <p/>
    This will have the same effect as previous example. In configuration file you can also specify many instances of required service with different "env" or "app_id" with config like this:
    <div class="code" style="background-color: #f1f0f0;">
    <div class="host-info" style="background-color: #444444;">
      service_discovery.json
    </div>
    <div class="command-result" style="color: #000000;">
{
    "scores-backend":
        [
            {"port":"2000", "app_id": "app_1"},
            {"port":"2001", "app_id": "app_2"}
        ]
}
    </div>
    </div>

  <h4>Hint.</h4>
    <ul class="text">
        <li>
            If we run our frontend with <span class="inline-name">dev/legacy/john</span> env, <span class="inline-name">microservice require</span> will first try to find service with
            matching <span class="inline-name">dev/legacy/john</span> env.
            Should it fail, it will try to find a service with <span class="inline-name">dev/legacy</span> env and eventually with <span class="inline-name">dev</span> env. Note that it
            will not match a service without specified env.
        </li>
        <li>
            In python package <span class="inline-name">armada</span> we offer easy way to get address of required service inside your container:
          <div class="code" style="background-color: #f1f0f0;">
            <div class="command-result" style="color: #000000;">
from armada import service_discovery

address = service_discovery.get_address('scores-backend')
            </div>
          </div>
          This method will return address of specified microservice, you can also specify required 'env' and 'app_id'.
        </li>
    </ul>
    <h4>Load balancing.</h4>
    <ul class="text">
    <li>
        If there are two ore more <span class="inline-name">scores-backend</span> services with matching envs, <span class="inline-name">microservice require</span> will automatically balance load
        between them.
    </li>
    </ul>
