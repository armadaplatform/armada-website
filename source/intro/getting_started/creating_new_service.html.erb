<link type="text/css" rel="stylesheet" href="/assets/css/article.css" />
<div class="content">

        <h3 id="new_service">Creating new service</h3>

        <p/>
        Now it may be a good time to roll your own service on Armada.
        The easiest way to create a new service is to base it on a template.
        As an example we will use Armada's template for Python:

        <div class="code">
            <div class="command">$ armada create microservice_python_template</div>
            <div class="command-result">
Service microservice_python_template has been created in /home/vagrant/microservice_python_template.
            </div>
            <div class="command">$ cd microservice_python_template ; find</div>
            <div class="command-result">
.
./README.md
./Dockerfile
./Vagrantfile
./supervisor
./supervisor/_MICROSERVICE_PYTHON_TEMPLATE_.conf
./src
./src/_MICROSERVICE_PYTHON_TEMPLATE_.py
            </div>
        </div>

        <p/>
        As we can see number of files have been created.
        The template service has no useful functionality yet.
        Let's try to add something simple like echoing it's input in uppercase.

        <div class="code">
            <div class="command">~/microservice_python_template$ vim ./src/_MICROSERVICE_PYTHON_TEMPLATE_.py</div>
            <div class="command-result">
import web

class Health(object):
    def GET(self):
        return 'ok'

<font color="yellow">class Shout(object):</font>
<font color="yellow">    def GET(self, txt):</font>
<font color="yellow">        return txt.upper() + "\n"</font>


def main():
    urls = (
        '/health', Health.__name__,
<font color="yellow">        '/shout/(.*)', Shout.__name__,</font>
    )
    app = web.application(urls, globals())
    app.run()


if __name__ == '__main__':
    main()

            </div>
        </div>

        <p/>
        Colored lines are the only ones that we've added. The rest was in a template.
        We can build the service image now.

        <div class="code">
            <div class="command">~/microservice_python_template$ armada build upcase-service</div>
            <div class="command-result">
Pulling repository dockyard.armada.sh/<font color="yellow">microservice_python</font>
cae965566422: Pulling dependent layers
511136ea3c5a: Download complete
<i>...(skipped)...</i>
356e562e6310: Download complete
Uploading context 9.728 kB
Uploading context
Step 0 : FROM microservice_python
 ---> cae965566422
<i>...(skipped)...</i>
Removing intermediate container dbdff2a06a09
Successfully built c0b134888b7a
            </div>
        </div>

        <p/>
        Building the service for the first time can take a little bit longer,
        because Armada downloads image <span class="inline-command">microservice_python</span>
        on which our template is based.
        This in turn is based on image <span class="inline-command">microservice</span>
        which is our recommended base docker image for microservices run on Armada.
        It contains some useful features such as autoregistering service in Armada catalog, built-in
        <span class="inline-command">sshd</span> and some other service discovery goodies.

        <p/>
        Now, we can test our new service by running it from local dockyard
        (<span class="inline-command">armada run upcase-service -d local</span>)
        or push it to some other dockyard, so it will be available from every ship.

        <div class="code">
            <div class="command">~/microservice_python_template$ armada push upcase-service</div>
            <div class="command-result">
Pushing microservice upcase-service to dockyard: 192.168.3.141:10000...
The push refers to a repository [192.168.3.141:10000/upcase-service] (len: 1)
Sending image list
Pushing repository 192.168.3.141:10000/upcase-service (1 tags)
Image 511136ea3c5a already pushed, skipping
<i>...(skipped)...</i>
f87353915cb3: Image successfully pushed
Pushing tag for rev [f87353915cb3] on {http://192.168.3.141:10000/v1/repositories/upcase-service/tags/latest}
            </div>
            <div class="command">~/microservice_python_template$ armada run upcase-service</div>
            <div class="command-result">
Running microservice upcase-service from dockyard: 192.168.3.141:10000 (alias: myrepo) locally...
Service is running in container 9707b42a4c77 available at addresses:
  192.168.3.141:49167 (22/tcp)
  192.168.3.141:49168 (80/tcp)
            </div>
            <div class="command">~/microservice_python_template$ curl http://192.168.3.141:49168/shout/Armada-is-cool!</div>
            <div class="command-result">
ARMADA-IS-COOL!
            </div>
        </div>

        <p/>
        Next, we should probably replace the term <span class="inline-command">_MICROSERVICE_PYTHON_TEMPLATE_</span>
        in the code with something more meaningful.
        We could do it also right at the start automatically by running
        <span class="inline-command">armada create microservice_python_template -n upcase-service</span>.
        <p/>
        Many more fun functionalities can be added later on, but basics of building and running
        new REST services with Armada templates are that easy.

        <p/>
        To learn how to operate many ships under Armada,
        please go to <a href="/intro/getting_started/ships/">Connecting ships</a> part.
</div>
